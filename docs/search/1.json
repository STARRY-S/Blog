{"data":[{"title":"404 Not Found","url":"/404.html","content":"\n    \n\n\n\n    Image from http.cat.\n\n"},{"title":"About","url":"/about/","content":"\n\n\nAbout Me\n\n学生党, 新鲜韭菜\n\n咱喜欢的游戏: Minecraft Java Edition, NieR:Automata, NieR:Replicant,\nDetroit: Become Human, Portal全系列; 除此之外咱还玩过Overwatch, PUBG, FGO,\nDon't Starve, 崩坏3等。\n\n咱喜欢的动漫/电影: 空之境界剧场版（推荐空境原著）、FSN &amp; FZ全系列、某科学的超电磁炮、\n君主·埃尔梅罗二世事件簿 魔眼收集列车 Grace note、声之形、秒速5厘米、利兹与青鸟、\n狼与香辛料。\n还看过格莱普尼尔、黑执事、几集新世纪福音战士和宝石之国和魔法禁书目录、\n我们从未知道那天所见的花的名字等。\n\n月厨, 空境剧场版看过无数遍, 原著看过一次后打算有时间再看一遍, 第一次读原著好多东西都没有\n看懂, FGO玩不懂算是个假月厨吧。\n\n咱喜欢摄影，有一台入门级半画幅单反，适马17-55mm f2.8和佳能50mm f1.8镜头。\n\n听歌种类略杂, 很少听华语。喜欢的歌以ACG系列为主, 首选Kalafina和梶浦由記的曲子以及尼尔/\n龙背系列。尽管不是东方厨但是东方的歌确实好听, 除此之外还听电音和轻音乐。\n\n常用Apple Music, 因为Apple Music有Kalafina的版权, 除此之外还经常用网易云音乐查找歌曲\n以及听日推\n\n偶尔在B站水视频, 是一名没有几个粉丝、几个月一更新的那种年更UP主, 不追求播放量和粉丝数,\n有人喜欢就很开心了。\n\n社交恐惧, 拖延, 情商低, 自我设障, 不过都太复杂了咱自己也讲不清楚\n（也不想弄清楚了, 不爱说话是真的\n\n不擅长制定并执行计划, 喜欢压力, 擅长拖延。\n\n菜, 很菜, 非常菜, 还懒, 不想努力, 肥, 宅, 新手, 不萌, 丑, 接近于废物一个。\n\n睡觉 睡觉 睡觉 睡觉 睡觉 睡觉 ZZZZZZZ~\n\n\n \n\nSTARRY-S' Blog\n建于2016年8月21日, 曾用域名starry-s.xyz、starry-s.com和starry-s.cn。\n现用域名为starry-s.me, 以后没问题的话就不打算换域名了因为.me域名好记而且我挺喜欢的,\n也不是很贵(听说涨价了)。\n因为之前更新过太多日常/碎碎念之类的水文, 所以2020年5月某天把旧篇幅全都删掉了, 后来挑选恢复了\n部分内容。如果实在想看以前的博客的话可以翻GitHub上的comments, 以后尽量以技术类文章为主,\n可能会某一阵子突然变得高产或者突然连续好几个月不更新，如果实在写不出来/没什么可写的话我会选择\n停更一段时间。\n本站由Hikaru生成,\n主题为ARIA,\n托管于GitHub Pages（见页面右下角）, 很喜欢这个生成器以及ARIA这款主题。\n音乐播放器\n是咱自己为Hikaru适配的APlayer插件,\n原理实现很简单, 欢迎去提issues。\n刚更新了播放器插件, 勉强适配了一下新出的\n暗色模式, 如果只调整播放器背景颜色\n的话在播放列表模式或者含有歌词显示时会很难看, 一开始想自定义css文件的后来觉得太麻烦得增加很多\n代码所以目前只是适配了没有播放列表、没有歌词的这种情况, 播放器背景颜色会随着主题颜色改变而改变,\n其他情况的解决方法还没想好, 不过说实话黑色模式真好看。因为实在没啥技术含量所以就不单独开一篇\n文章讲这么水的事情了。\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"尼尔机械纪元 Nier Automata - Soundtrack Medley\",\n        artist: \"Animenz\",\n        url: \"https://music.starry-s.me/music/0f0e_0758_070b_8de6859a81025aae1e540aed59439f48.m4a\",\n        cover: \"https://music.starry-s.me/music/cover/109951163092751719.jpg\",\n        lrc: \"\",\n        theme: \"#F6890E\"\n    }]\n});\n \n\n\n写于2020年8月16日凌晨, 随时更新。\n\n"},{"title":"归档","url":"/archives/","content":""},{"title":"分类","url":"/categories/","content":""},{"title":"首页","url":"/","content":""},{"title":"标签","url":"/tags/","content":""},{"title":"Learn OpenGL","url":"/posts/learn_opengl/","content":"其实咱很久很久以前就开始看LearnOpenGL CN\n这个网站了......\n\n\n\n本篇仍在编写中...\n\n\n\n前言\n咱是从高中就开始看LearnOpenGL CN这网站了，但是那个时候咱只学了一点C，所以当时咱遇到了C++的\n命名空间std::时就一头雾水，更别说啥渲染图形了。\n然后大一时也尝试过学OpenGL这玩意，当时不懂啥叫状态机啥叫顶点/片段着色器，被glsl绕得蒙头转向，\n心想着OpenGL怎么这么复杂，照别人写好的代码抄一遍确实能画个五颜六色的三角形出来，但是当时不懂\n为什么这样子向顶点着色器传顶点坐标，到底啥叫着色器，它究竟干了什么， GLSL的变量到底是怎么用的。\n ~~老师：“不要因为上过我的这门课就和别和别人说你们学过计算机图形学”~~ -->\n\n\n首先需要明白什么是核心渲染模式，什么是立即渲染模式，立即渲染模式的代码中都包含glBegin()\n和glEnd()，绘图的部分都是在这两个函数之间，比如画一个点就是glVertex2f(x, y)，这种方式\n画图确实很简单，和canvas，java的swing一样，用户只要提供坐标和颜色就好了，\n不用知道GPU干了什么，而缺点是性能低，有很多限制，所以新版本的OpenGL为了给开发者提供更多的\n可操作空间而废弃立即渲染改用核心模式。\n核心模式提供了很多强大的功能，可以管线编程，代码量增加了很多，所以对初学者不太友好。\nLearnOpenGL CN上面的代码基于C++，而OpenGL是用C编写的，教程上的代码除了矩阵运算部分可以\n使用C++的运算符重载而使代码编写起来变得更简单一些外，其他部分基本没啥区别，而且教程为了便于教学\n使用的也是面向过程式编程，没有将各个功能封装到一个类里面，所以咱这篇教程用C编写。\n要记住C就是C，C++就是C++，C不是C++的子集，只能说C++兼容部分C的代码，不要把C和C++混用，\n不要因为C++支持面向对象使得一些功能看起来简单很易于使用就轻易迈入C++的坑，毕竟还有那么多支持\n面向对象的语言可以选。\n准备工作\n有关OpenGL的介绍以及安装GLFW、GLAD以及编译所需的CMake的部分可以直接看\n教程，\n咱尽可能把教程上没有提到的或者是刚开始学OpenGL很难理解的部分记录下来。\n大体上就是安装glfw，Arch Linux使用包管理器sudo pacman -S glfw-x11\n(如果你使用的是wayland，那么安装glfw-wayland)，然后把下载的glad/glad.h复制到\n/usr/include下，把glad.c复制到工程文件夹的代码目录下。\n为使用CMake生成Makefile，编写CMakeLists.txt:\ncmake_minimum_required(VERSION 3.0)\n\nproject(\n    \"Learn OpenGL\"\n    LANGUAGES C\n    VERSION 0.1.0\n)\n\nset(C_FLAGS \"-Wall -lm -ldl -std=c11\")\nset(CMAKE_C_FLAGS ${C_FLAGS})\nset(OpenGL_GL_PREFERENCE LEGACY)\n\nfind_package(glfw3 REQUIRED)\nfind_package(OpenGL REQUIRED)\n\ninclude_directories(${OPENGL_INCLUDE_DIR} src)\n\naux_source_directory(\"src\" GLSRC)\nadd_executable(main ${GLSRC})\ntarget_link_libraries(main ${OPENGL_gl_LIBRARY} glfw)\n\n完成上述步骤后，确保工程文件夹的结构大体如下：\n├── build/\n├── CMakeLists.txt\n└── src/\n    ├── glad.c\n    └── main.c\n\n创建窗口\n编辑main.c，加入所需的头文件\n\n#include \n#include \n\" data-info=\"language-C\" data-lang=\"C\" class=\"code-block\">// glad.h要加在glfw3.h之前\n\n#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;stdio.h&gt;\n\n在main函数中初始化OpenGL并创建窗口\nint main(int argc, char **argv)\n{\n        glfwInit();\n        /* 使用OpenGL版本为3.3 */\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        /* 使用核心模式 */\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n#ifdef __APPLE__\n        glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n#endif\n\n        /* 创建窗口 */\n        GLFWwindow *window =\n                    glfwCreateWindow(800, 600, \"Hello World\", NULL, NULL);\n        if (window == NULL) {\n                fprintf(stderr, \"Failed to create window.\\n\");\n                glfwTerminate();\n                return -1;\n        }\n        glfwMakeContextCurrent(window);\n\n        /* 初始化glad */\n        if (!gladLoadGLLoader((GLADloadproc) glfwGetProcAddress))\n        {\n                fprintf(stderr, \"Failed to initialize GLAD\\n\");\n                glfwTerminate();\n                return -1;\n        }\n\n        /* prepare render */\n\n        /* main loop */\n\n        glfwTerminate();\n        return 0;\n}\n\n创建窗口的代码比较容易理解，到这里可以尝试编译一下代码检查有没有遇到什么问题，如果编译失败了\n可以尝试检查OpenGL是否安装正确，代码哪里出现了什么问题。\n编译代码并运行生成的程序：\ncd build\ncmake .. &amp;&amp; make -j8\n./main\n\n如果一切正常的话，可以看到窗口一闪而过就消失了，因为到目前为止我们只创建了一个窗口，创建完成后\n就结束了程序，所以窗口会瞬间消失。\n\n准备绘图\n在绘制形状之前，我们需要一些准备工作比如设定视口、回调函数，创建顶点缓冲区等操作，\n然后在大循环中进行渲染绘制。\n视口\n首先要告诉OpenGL咱的窗口尺寸是多少，以便OpenGL根据窗口大小显示数据和坐标。\n在/* prepare render */处添加代码：\nglViewport(0, 0, 800, 600);\n\n首先需要知道你传给OpenGL的坐标都是-1.0到1.0之间的数，OpenGL再将其转换成屏幕上的像素点\n坐标，这个过程由GPU运算所得，所以你得告诉OpenGL你的屏幕尺寸，glViewport的前两个参数为\n0, 0指的是窗口左下角的位置，这个值咱目前不需要修改。\n回调函数\n我们需要一个窗口被更改的回调函数，这样当窗口尺寸发生变化时，程序可以调用这个函数调整视口。\n编写函数framebuffer_size_callback用来处理窗口尺寸更改:\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height)\n{\n        glViewport(0, 0, width, height);\n}\n\n这样当你拖拽窗口进行缩放时，窗口里的图像也会跟着窗口尺寸改变而进行缩放。\n然后我们需要注册这个回调函数，在/* prepare render */处添加下面的代码:\nglfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n处理按键操作\n编写processInput函数处理用户按键操作：\nvoid processInput(GLFWwindow *window)\n{\n        if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS){\n                glfwSetWindowShouldClose(window, GL_TRUE);\n        }\n\n        if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS) {\n            glfwSetWindowShouldClose(window, GL_TRUE);\n        }\n}\n\n当用户按下ESC或Q键时，可以结束OpenGL窗口的运行。\n大循环\n在大循环中我们进行游戏的每一帧的绘制，利用双缓冲将绘制的图形放到缓存中，然后将缓存中的图形刷新到\n显示器上，(因为OpenGL绘图操作是逐行绘制的，如果不先将图形存到显存中而直接显示在显示器上的话，\n在画面变动时你很可能会看到撕裂，闪烁，垂直不同步这类的问题)。\n在大循环中我们要处理按键操作(例如游戏中的W S A D代表前后左右移动)，然后在大循环中绘制图形，\n大循环部分的代码长这个样子:\nwhile(!glfwWindowShouldClose(window))\n{\n        /* process input */\n        processInput(window);\n\n        /* draw something */\n\n        /* swap buffer */\n        glfwSwapBuffers(window);\n        /* poll events */\n        glfwPollEvents();\n}\n\n大循环每循环一次，OpenGL就渲染了一帧画面并显示在显示器上，所以你可以计算一秒钟循环的次数而求得\n游戏的帧率。\n\n因为我们使用了双缓冲，所以这时游戏的帧数被限制为等于显示的刷新帧数，\n比如显示器刷新率为144帧，游戏的帧率就被锁为144，如果想解除这个限制需要改为单缓冲。\n\n\n到此为止，我们已经创建了一个游戏引擎，但是这个引擎还什么都没有做。\n尝试编译代码，可以看到一个黑色的窗口，按ESC或Q即可结束运行。\n\n\n    \n\n\n\n画三角形\n首先我们需要创建一个顶点缓冲对象，用来存我们的顶点信息，这个对象叫“Vertex Buffer Object”\n（VBO），之后创建一个顶点数组对象“Vertex Array Object”（VAO），用来存我们创建的VBO。\n\n尚未完工，不定期更新\n2021.05.10 21:33:02\n\n"},{"title":"Spring - 4","url":"/posts/spring-4/","content":"\n\n\n咱去年忘了更新这个系列...\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"愚カシイ机械\",\n        artist: \"岡部啓一 / 石濱翔 / 帆足圭吾 / 高田龍一\",\n        url: \"https://music.starry-s.me/music/f47cbf8a517c72c16b5eff614cd78ace.m4a\",\n        cover: \"https://music.starry-s.me/music/cover/2522279674184572.png\",\n        lrc: \"\",\n        theme: \"#aa6666\"\n    }]\n});\n \n\n\n前一阵子买了二手的适马17-50 f2.8镜头，在网上看这镜头很适合新手学摄影，而且这个焦段+大光圈\n适用的范围也很广。遂把在家吃灰了一年的相机带回学校，打算找时间拍点风景照片。\n实际上买完新镜头后我就拿它拍了几张花的照片后也没怎么出过门，因为照片拍得比较少，所以只好先挑\n几张好看的微距照片贴到博客上面，以后有机会拍到更好的照片后再更新。\n\n仅使用Raw Therapee对照片进行了裁剪并调整颜色\n\n\n\n\n\nSpring - 4\n"}]}