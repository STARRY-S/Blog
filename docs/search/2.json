{"data":[{"title":"联想R7000P安装Arch Linux的常见问题","url":"/posts/lenovo-r7000p/","content":"\n\n\n本篇原标题为「联想R7000P上手体验」，因为内容大多在讲安装Linux时遇到的问题及解决方法，所以把标题更改为「联想R7000P安装Arch Linux的常见问题」。\n\n旧电脑坏掉了，因为坏的有些复杂而且不忍心拿到学校的修理店去修于是打算等到暑假有时间自己买零部件修。（就不吐槽惠普的产品设计问题了...\n于是在网上逛了一会下决心再也不碰惠普了之后买了联想R7000P 2020，满血RTX 2060(这里指的是最大功耗为115W的笔记本显卡) + R7 4800H还是很香的，打守望屁股终于能稳定200+fps了。\n所以隔了这么久我终于更新博客了。\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"Underground\",\n        artist: \"Lindsey Stirling\",\n        url: \"https://music.starry-s.me/music/obj_wonDkMOGw6XDiTHCmMOi_2660462601_5de2_ff1b_7e9f_3314960c90b9d68875a3d640df5d283a.mp4\",\n        cover: \"https://music.starry-s.me/music/cover/109951164174520818.jpg\",\n        lrc: \"\",\n        theme: \"#CC8888\"\n    }]\n});\n \n\n\n安装Arch Linux\n到手后就把之前买的西数SN750 1T固态换到了新电脑上，顺便格式化重装了个系统。\n双M2插槽配上1T + 500G NVME，美汁汁。\n于是直接给Linux分了150G root，16G SWAP，500G HOME（有点奢侈）， 然后还分了100G用来存steam游戏，剩下的全扔给Windows。\n装Linux过程中只遇到了终端的警报声有些大而这个问题（插耳机时声音依旧从扬声器输出），别的问题都没遇到。\n之前的电脑总是遇到奇葩问题，用旧版本Linux内核关机或者lspci时会卡死，显卡驱动装不好会导致开机死机，声卡驱动一直有问题听歌时音量大一点就爆音，HDMI接口直连的NVIDIA显卡所以显卡驱动没配置好独显不工作时没办法外接显示器(后来才知道type c接口有DP视频输出)。\n新电脑买来装完系统后就遇到了一点小问题网上搜一下就解决了。\n屏幕亮度不能调节\n开个浏览器能把眼睛晃瞎\n网上查了一下只有在bios设置为独显直连时解决亮度不能调节的方法，在混合显卡模式下，存在AMD显卡亮度用16位值表示而不是8位值表示的这个BUG (Feature?)所以没办法调节亮度。\n所以cat /sys/class/backlight/amdgpu_bl0/actual_brightness得到的是一个大于255的数。\n确保内核和显卡驱动都是最新的情况下，编辑内核参数amdgpu.backlight=0和acpi_backlight=vendor，可以解决混合模式下AMD显卡不能调节亮度这个问题。\n如果你经常切换混合模式和显卡直连模式的话：\n安装显卡驱动xf86-video-amdgpu和nvidia以及按需要安装nvidia的其他组件。\n复制/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf到/etc/X11/xorg.conf.d/\n编辑/etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf在EndSection前添加一行参数允许nvidia驱动调节亮度。\nOption \"RegistryDwords\" \"EnableBrightnessControl=1\"\n\n之后编辑/etc/modprobe.d/blacklist.conf禁用闭源驱动nouveau和ideapad_laptop，让显卡驱动调节亮度。\n# /etc/modprobe.d/blacklist.conf\n\nblacklist nouveau\nblacklist ideapad_laptop\n\n编辑内核参数添加acpi_backlight=vendor和amdgpu.backlight=0。\n以systemd-boot为例:\n# /boot/loader/entries/arch.conf\n\noptions acpi_backlight=vendor\noptions amdgpu.backlight=0\n\n最后重启电脑就能调亮度了。\nGDM不自启动\n开机时GDM不会自动显示出来而是得手动切TTY2再切回TTY1才能显示。\n查Wiki得知是因为GDM在显卡驱动被加载之前就启动了。\n参照Wiki，设置KMS早启动。\n编辑/etc/mkinitcpio.conf\n# /etc/mkinitcpio.conf\n\nMODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm amdgpu radeon)\n\n如果你只使用独显直连模式的话可以去掉amdgpu和radeon。\n然后sudo mkinitcpio -p linux重新生成内核镜像，之后重启。\n这么做会使Wayland在开机时被禁用，所以在混合模式使用AMD显卡开机时无法使用Wayland，参见Wiki。\n将/usr/lib/udev/rules.d/61-gdm.rules复制到/etc/udev/rules.d/，并编辑61-gdm.rules将下面这一行注释掉：\nDRIVER==\"nvidia\", RUN+=\"/usr/lib/gdm-disable-wayland\"\n\n之后重启电脑再开机echo $XDG_SESSION_TYPE就可以检查现在使用的是wayland了。\nOptimus Manager\n因为独显功耗太高了，使用独显直连模式在浏览网页写文档这类的轻度工作时电池待机只能2小时，用混合模式的话能待机4.5小时，外加上我也不打那些对性能要求很高的游戏，\n所以日常使用时就在Bios里设置显卡为混合模式。\n然后在Linux系统里安装optimus-manager，修改配置为：使用电池开机时关掉NVIDIA显卡，只让AMD集显工作；有外接电源时则使用“hybrid”混合模式，如果需要玩游戏的话用nvidia-prime让独显运行游戏。\nOptimus Manager的配置方法和之前我之前配置旧电脑时讲的基本一样，唯一区别就是这电脑是AMD，旧电脑是Intel。\n所以编辑配置文件修改了这些地方：\n# /etc/optimus-manager/optimus-manager.conf\n\n# 设置开机自动切换显卡模式\nstartup_mode=auto\n\n# 使用电池时关掉独立显卡降低功耗\nstartup_auto_battery_mode=integrated\n\n# 使用外接电源时为混合模式\nstartup_auto_extpower_mode=hybrid\n\n[amd]\n# 因为安装的xf86-video-amdgpu, 所以修改驱动改为amdgpu\ndriver=amdgpu\n\n安装好nvidia-prime后在混合显卡模式（hybrid）下，使用prime-run让独显运行游戏。\n如果想让Steam以独显运行游戏，修改启动参数为prime-run %command%。\nWindows\n在Windows系统下显卡独连时字体渲染有些蹦，设置了ClearType之后还是没啥改善。\n主要是Visual Studio 2019的字体渲染真的瞎眼，最后装了Text Sharp插件换了Jet Brains字体才看起来正常了一些。\n最后在NVIDIA控制面板全局设置里把平滑处理全关了，字体的锯齿才消失。\n貌似是因为NVIDIA把文本编辑器当游戏渲染了。\n\nOthers\n\n在Linux系统里会遇到按Fn+Esc键时FnLock的灯没有亮这个问题，不过不影响FnLock的正常使用，所以就忽视了。\n\n如果要用诱骗线充电的话，用optimus-manager把独显关掉（用nvidia-smi得知独显在不使用的情况下仍有5W的功耗），然后装一个CPU功率调节的软件，例如cpupower-guiAUR，设置为节电模式，实测用小米65W GaN充电器给电脑充电，轻度使用没有卡顿掉电的情况。\n\n因为之前趁着狗东打折加上买显示器送的100E卡，只花了两百多买了一个紫米20移动电源（板砖），25000毫安且支持100WPD充电。按照上面讲的方法在电池满电的情况下一边轻度使用电脑一边充电，充电宝能用4小时左右，然后笔记本的电池还能续航4至5小时。（实在是因为原装充电器它太沉了）\n\n目前来看觉得这电脑还是蛮香的，AMD的CPU性能很强而且比intel版的Y7000P便宜一千块钱。尽管现在已经有二线厂商做AMD 5800系的笔记本了但是4800H的性能依旧够用，RTX3060显卡就当它是空气吧就算发售也是残血而且抢不到。\n\n然后就是电脑没有雷电3接口，只有一个支持USB3.2 Gen1的type c接口且支持DP1.2视频输出，不过USB接口倒是挺多的，电脑用到现在没有遇到啥AMD CPU引起的兼容性问题。\n\n\n\n\n"},{"title":"小米路由器3G之使用TTL串口刷机救砖","url":"/posts/xiaomi-r3g-ttl-flash/","content":"\n\n砖了\n本来路由器闲置了一年了都没咋用了，前两天想把OpenWrt系统刷回原厂系统。\n然鹅刷原厂固件时忘记改环境变量了，因为第三方Boot Loader也被我顺带刷回了原厂的所以现在开机无限重启。\n之前买单片机套件时赠了一条usb转ttl线的，但是被我放学校了。只好再从万能的某宝再买一条线，尝试着救砖了。\n(在某宝发现了一家店啥元件都有，还特别便宜。于是我还顺带买了很多杜邦线、电阻、LED灯、面包板等小玩意...)\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"crescent in the sky\",\n        artist: \"Stepan Voles\",\n        url: \"https://music.starry-s.me/music/396e_a80d_10de_076d0b69c03bd2673595bd17ce939f69.mp3\",\n        cover: \"https://music.starry-s.me/music/cover/1379887099097990.jpg\",\n        lrc: \"\",\n        theme: \"#2233ee\"\n    }]\n});\n \n\n\n拆机\n\n\n北方冬季气候干燥，拆机时记得放静电，找根铁丝把自己连地线上 (找个金属外壳是接地的电器和自己连上也行)。\n\n拆开路由器外壳，卸下主板，顺手拆掉了散热片（屏蔽罩）。\n串口在图片上主板的左侧，旁边有标记，从上到下依次是TX、GND、RX、1。需要注意的是主板上的TX要接到usb串口的RX，主板上的RX要接到usb串口的TX，GND连GND，VCC不用连。为了防止接错线，小米还十分贴心的标注了每个接口对应的连接线的颜色。\n\n找出家里吃灰好几年差点被我扔掉的电烙铁，刮刀头刮了半天电烙铁才上锡，把新买的杜邦线母线焊到主板上，和ttl串口线相连。\n(电烙铁太破了根本焊不上锡，焊得很丑，emmm)\n实际上可以买个4PIN单排针焊上去，把串口接到排针上就可以，我直接把电线焊到上面以后用起来会很麻烦。\n刷机\n\n以下部分基于Arch Linux，其他系统的操作方式可能不一样（例如Windows可能需要超级终端访问串口，再想办法开一个tftp服务器）\n刷机的原理: 通过ttl串口线连接路由器的主板，让路由器访问电脑上的tftp服务器，刷第三方Boot Loader。\n\n\n首先电脑上装一个tftp服务器。\n\n$ sudo pacman -S tftp-hpa\n$ sudo systemctl start tftpd.service\n\n  tftp的默认目录为/srv/tftp。\n  这里使用HackPascal制作的Breed（第三方Boot Loader），下载链接，把下载好的Breed重命名为breed.bin，复制到tftp的默认目录。\n$ cd /srv/tftp\n$ sudo cp ~/Downloads/breed-mt7620-xiaomi-r3g.bin breed.bin\n\n\n路由器插网线连电脑，设置静态ip地址192.168.1.3/24，将串口和电脑连接，先不给路由器通电，通常情况下usb串口的设备名称为/dev/ttyUSB0，如果不确定的话可以dmesg查一下。\n\n使用screen连接串口，波特率为115200。\n\n\n$ sudo pacman -S screen\n$ sudo screen /dev/ttyUSB0 115200\n\n  路由器通电，终端上会显示路由器启动的信息，等几秒后在选择启动项的时候按9，通过TFTP加载Boot Loader。\n\n如果串口在连接到电脑的情况下主板通电时没有响应，那就断开usb串口先给主板通电后再连接串口。\n(我语文不好别骂我)\n如果路由器没有变砖可以正常启动（蓝灯长亮），在正常开机过程中不能选择启动项。此时可以尝试在路由器开机后长按reset按钮7s以上直到主板重启，便可以选择启动项。\n\nPlease choose the operation: \n 1: Load system code to SDRAM via TFTP. \n 2: Load system code then write to Flash via TFTP. \n 3: Boot system code via Flash (default).\n 4: Entr boot command line interface.\n 7: Load Boot Loader code then write to Flash via Serial. \n 9: Load Boot Loader code then write to Flash via TFTP. \n\nYou choosed 9\n \n9: System Load Boot Loader then write to Flash via TFTP. \nWarning!! Erase Boot Loader in Flash then burn new one. Are you sure?(Y/N)y\n\n  之后设置路由器主机地址（192.168.1.1）和TFTP服务器地址(192.168.1.3)以及文件名称(breed.bin)。\nPlease Input new ones /or Ctrl-C to discard\n          Input device IP (192.168.31.1) ==:192.168.1.1\n          Input server IP (192.168.31.3) ==:192.168.1.3\n          Input Uboot filename (uboot.bin) ==:breed.bin\n\n  按回车后开始刷机，过几秒钟后路由器会自动重启，第三方Boot Loader刷写完成。\n  路由器断电，长按reset键的同时通电开机，灯闪烁后打开浏览器输入网址http://192.168.1.1便可访问breed后台。\nDone\n第三方Breed刷完后，先用Breed刷小米官方的开发版固件，开启ssh，之后按照小米路由器3G折腾之刷OpenWrt记录这篇文章刷OpenWrt。\nBusyBox v1.19.4 (2018-10-29 07:52:03 UTC) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n -----------------------------------------------------\n       Welcome to XiaoQiang!\n -----------------------------------------------------\n  $$$$$$\\  $$$$$$$\\  $$$$$$$$\\      $$\\      $$\\        $$$$$$\\  $$\\   $$\\\n $$  __$$\\ $$  __$$\\ $$  _____|     $$ |     $$ |      $$  __$$\\ $$ | $$  |\n $$ /  $$ |$$ |  $$ |$$ |           $$ |     $$ |      $$ /  $$ |$$ |$$  /\n $$$$$$$$ |$$$$$$$  |$$$$$\\         $$ |     $$ |      $$ |  $$ |$$$$$  /\n $$  __$$ |$$  __$$&lt; $$  __|        $$ |     $$ |      $$ |  $$ |$$  $$&lt;\n $$ |  $$ |$$ |  $$ |$$ |           $$ |     $$ |      $$ |  $$ |$$ |\\$$\\\n $$ |  $$ |$$ |  $$ |$$$$$$$$\\       $$$$$$$$$  |       $$$$$$  |$$ | \\$$\\\n \\__|  \\__|\\__|  \\__|\\________|      \\_________/        \\______/ \\__|  \\__|\n\n\nroot@XiaoQiang:~# \n\n"},{"title":"解决笔记本外接HIDPI显示器的缩放问题","url":"/posts/laptop-dualscreen-hidpi-scale/","content":"\n\n起因\n前天在狗东买了台27寸4K显示器，型号为优派VX2771-4K-HD，分辨率3840x2160，支持HDR 10bit色深（然而电脑只支持DP1.2），因为之前已经配置好了optimus-manager，所以电脑接上显示器就能亮，很幸运没有遇到物理问题。\n然后一看4K屏上的字小得瞎眼。\n如果设置分辨率为1080P，显示文字时会特别糊，根本没法看，效果还没有1080P显示器好。\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"エンドロール\",\n        artist: \"KEIKO\",\n        url: \"https://music.starry-s.me/music/obj_w5rDlsOJwrLDjj7CmsOj_5016145218_8a57_c3ad_6dee_bedcb53124a46de8152d464b7db24470.mov\",\n        cover: \"https://music.starry-s.me/music/cover/109951165501153240.jpg\",\n        lrc: \"\",\n        theme: \"#886666\"\n    }]\n});\n \n\n解决方法\n首先按照Wiki设置GNOME的HIDPI:\n}]&quot;\n$ gsettings set org.gnome.desktop.interface scaling-factor 2\n\" data-info=\"language-text\" data-lang=\"text\" class=\"code-block\">$ gsettings set org.gnome.settings-daemon.plugins.xsettings overrides \"[{'Gdk/WindowScalingFactor', &lt;2&gt;}]\"\n$ gsettings set org.gnome.desktop.interface scaling-factor 2\n\n在显示设置里将缩放调到200%后，界面被放大了2倍，在4K屏上的字倒是不瞎眼了。\n但是因为笔记本是15寸1080P，所以笔记本上显示的字大得离谱。\n解决方法是使用xrandr调整笔记本电脑的屏幕缩放，笔记本的分辨率为1920x1080，使用xrandr将画面的分辨率放大2倍，也就是调整为3840x2160，然后显示在分辨率为1920x1080的显示器上。\n首先使用xrandr查看每个显示器所对应的设备名称和分辨率。\n$ xrandr | grep \"$extern connected\"\n\n  HDMI-0 connected primary 3840x2160+0+0 (normal left inverted right x axis y axis) 597mm x 336mm\n  eDP-1-1 connected 1920x1080+0+2160 (normal left inverted right x axis y axis) 344mm x 193mm\n\n这里HDMI-0是外接的4K显示器，分辨率为3840x2160，位置为(0, 0)。\neDP-1-1是笔记本的显示器，分辨率1920x1080，位置为(0, 2160)，在4K显示器的左下方。\n参见Wiki设置双显示器部分，用xrandr将笔记本的显示器缩放2倍，分辨率变为 [1920 * 2]x[1080 * 2]=3840x2160，位置还是在4K显示器的正下方。\n$ xrandr --output eDP-1-1 --scale 2.0x2.0 --panning 3840x2160+0+2160 --output HDMI-0 --auto\n\n因为不需要修改4K显示器的分辨率，所以HDMI-0设置为auto。\n这样笔记本上的画面也显示正常了。\n但是用过一阵子会发现笔记本显示器上的字比4K显示器上的字小很多，看起来不方便，所以把缩放倍数改为1.6（我是从1.5-2.0之间一点点试的，才找到最适合自己的缩放倍数），这样解决了字体大小的问题，不过笔记本画面还是会有模糊（能接受）。\n\n[1920 * 1.6]x[1080 * 1.6]=3072x1728\n\n$ xrandr --output eDP-1-1 --scale 1.6x1.6 --panning 3072x1728+0+2160 --output HDMI-0 --auto\n\n用到现在GNOME的缩放还算是完美，除了玩Minecraft用的HMCL启动器（Java程序）没有被放大之外（貌似缺配置，要是配置好了我再补充），Steam界面缩放正常，饥荒、Dota2也都没问题。\n\nJava8不支持Hidpi缩放，如果想让HMCL支持缩放需要需要安装Java9以上的版本，所以还是算了，又不是不能用。\n网易云音乐缩放方法参考这篇博客。\nqt5设置环境变量QT_SCREEN_SCALE_FACTORS=2。\n\nOthers\n\n仅限GNOME，因为我只用GNOME所以不知道其他DE开HIDPI的效果是什么样。\n\n听说Wayland支持不同显示器设置不同的缩放倍数，但是我笔记本的HDMI是独显输出，自带屏幕为集显输出，想启用独显输出画面除了用大黄蜂之外只能Nvidia Optimus，然而Optimus不支持Wayland（F**K NVIDIA），\n于是我现在都不知道用Wayland上双显示器的效果是什么样子，只好改用xorg和optimus-manager切换显卡，再用xrandr调显示器的缩放倍数。\n或者买一根type-c转DP的线连显示器，我电脑的type-c支持DP1.2，可以输出4K60fps，而且走集显输出。\n\nxrandr的指令是我自己试了很多遍试出来的，在我电脑上能用，期间遇到一堆问题(BadMatch)，没想好什么解决方法，所以在别的电脑上可能需要一些修改。\n\n如果你正考虑为你的笔记本购买一台新显示器而且你是Linux用户，你的笔记本又是双显卡，不知道HDMI是独显输出还是集显输出的话，建议你买一台和笔记本电脑的分辨率相同的显示器(或者2K)，这样能省去很多麻烦。\n\n用了几个月后经常遇到显示器通过HDMI连接到电脑但是没有视频输出的情况，所以现在改用的是type-c转DP的连接线，走集成显卡输出，就没有遇到过这个问题。\n\n\n"},{"title":"Hello 2021","url":"/posts/hello-2021/","content":"\n\n\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"Gloria\",\n        artist: \"Kalafina\",\n        url: \"https://music.starry-s.me/music/kalafina-gloria.aac\",\n        cover: \"https://music.starry-s.me/music/cover/2505786999756176.png\",\n        lrc: \"\",\n        theme: \"#cc2222\"\n    }]\n});\n \n\n\n本来我已经戴好耳机准备睡觉了的，突然想起来2020年的年终总结还没有写，恰好脑子里有想写的东西，于是大概构思了一下，便从床上爬起来开灯打开电脑开写年终总结。\n因为思路不是很稳定，总是写了删删了写，所以隔了这么久才把原本已经放弃了不打算写的年终总结重新写出来。\n果然还是深夜适合写这些东西。\n今年原本打算能像去年那样在假期外出旅行的，然而疫情爆发后我就一直窝在家待着哪里都没去，不过在1月17号也就是武汉封城前几天，我自己一个人坐飞机跑去北京玩了一圈，当时还不知道有疫情这么一回事，到北京后就是找个地方住下，简单的去了一些景点，后来因为脚疼，很多路远的人多的地方都没有去成。在北京闲逛3天后就坐大客车回家了（一边坐车一遍骂京哈高铁京承段为什么一点进展都没有）。到家后不几天就听说武汉开始封城，然后北京就开始交通管制，现在想想还挺刺激的。\n然后暑假本来打算去上海BW2020的，在票都买好了之后，因为外出需要和学校审批（此处省略若干字），最终漫展门票全打水漂，飞机票退票手续费还花了三百多块钱。\n上半年宅在家里大半年，几乎是什么都没学，什么事情都没干。不过也借此机会每天都能睡个大懒觉，总之就是狠狠的歇了一顿，尝试着把高中时期欠的觉补回来，然而似乎并不管用。\n然后总感觉自己每天都很累，明明什么都没有干但是身体总是一点力气都没有，总之下半年开学后经历了很长一段时间才重新适应了学校的生活，期间心理变化很复杂。\n所以大二下学期和大三上学期的期末成绩基本上都是刚好及格。（真的是烤60分比烤80分还高兴）\n\n年初看了几集超电磁炮3，看到后来因为它更新太慢了就忘了继续看了。之后还看了格莱普尼尔，看这个番纯粹是因为它的OP是Hikaru唱的，看着看着觉得挺有意思而且官方更新速度很快，于是就把第一季追完了。\n然后因为Lacrimosa这首歌，我才看的黑执事，不过自己比较懒只看了第一季，第二季一直咕到现在都没有看，听说剧情挺虐的所以我更不敢看了。（明明第二季的ed比第一季的还好听）\n本来还打算看新世纪福音战士的，也是因为懒，看了一集就不继续看了。\n除此之外，年末的时候在睡前为了打发时间看了几集非自然死亡。\n\n这一年又打了一遍尼尔：机械纪元。和第一次玩不太一样，二刷时我尽可能的多做支线任务，不开简单模式和自动芯片。不过通关后我还没有打E结局，总想找个时间把其他支线任务做完。\n年初在逛淘宝时发现了台版的尼尔原著小说，于是毫不犹豫的把少年寄叶、短话和长话全都买了下来。不过截至目前我只看完了短话。在看完艾米尔的回忆那一章后很感动于是打开游戏找到相对应的支线任务，废了很大力气找到那三朵“Lunar Tear”（月之泪）之后，前往种着一大片月之泪的地下室。\n在网上看攻略找到了艾米尔居住的家，于是又走了很远的路到地下很深的地方，到他家里面拿（偷）走了面具。\n据说去他家偷完东西后会触发艾米尔的boss支线，不过因为在寝室没太多时间所以我没有继续玩下去。\n蛮期待2021年4月发行的尼尔续作的，不过有些担心我的笔记本还能不能跑得起来。\n\n尝试着二刷空境原著，不过没刷完，所以只好等以后有时间再看了。\n2020年下半年花了很大力气尝试玩懂FGO，不过最终因为太肝、自己太非、没时间而劝退，前几章的主线太枯燥乏味了，而且我貌似只对FSN系列和空境系列的人感兴趣，FGO里面的人物基本和他们不沾边而且我也不认识。\n很期待月姬重制版，尽管我目前还一点都不了解月姬。既然月姬重置版只在主机平台上映，尼尔续作也有主机版，那么我是不是应该提前准备一台PS4呢？\nPS5水货太贵了还是算了，除非等国行，然而等国行又要等到4月份。\n关键是我连PS4都买不起。\n\n2021年1月22日后续：\n最终买了二手港版PS4 Slim，考虑了价格、重量、性能、体积等因素后没有买Pro（主要是没钱），因此现在变得非常贫穷。\n换了笔记本上拆下来闲置了一年的1T硬盘，尝试着在尼尔：伪装者发售前三刷一遍尼尔：机械纪元，因为PS4太好玩了所以现在在后悔为什么不早点买PS4。\n\n\n2020年4月份的时候新开了一个Minecraft单机生存的坑，原本是打算看一下新版本（1.15.2）更新了什么新特性的（蜜蜂），结果玩上生存就停不下来了。先是花了两个星期用纯铁镐手挖两个史莱姆区块，用矿车运村民和僵尸照着B站的视频建了简易的刷铁机，之后又用不到一个月的时间解放末地。总之就是玩上了就停不下来了。然后照着B站各大UP主的视频做了末地刷沙机、然后是混凝土固化机，后来挂三向轰炸机肝了3天清了出生点空置域。用了短短几个月的时间一个人建了很多东西，去地狱打了凋零骷髅头，建海上刷怪塔刷火药和骨粉。后来物资储备足够多了之后就开始挖地铁（旧习难改吧），一年的时间挖了两条地铁线路，盖了十几座车站、一座跨海大桥、一栋摩天大楼。\n原来单机生存还能玩得这么有意思，B站上有很多生电大佬，然而红科搬的视频我基本都看不懂。\n后续可能要再修几条地铁，延长已有的线路，然后再搞一些建筑，炸一个原点空置域修全物品分类机，然后还打算升级1.16.4。\n\n就回忆到这里吧，2020是个特别的一年。\n\n  \n\n\n\n犹豫了很久最后还是决定把之前删掉的部分文章恢复回来，不然总给人一种这个博客是在2020年创建的而不是2016年创建的错觉。\n2020年博客鸽了很长一段时间，当时尽管并没有放弃博客但是我真的什么都写不出来，因为看到自己以前写的水文觉得很恶心而且十分不适，于是就在某个心情不好的时候删掉了。后来换了一个新的域名之后就再也没和任何人提起“我还有一个博客”这件事情，因为把博客的文章全删除后几乎没人访问我的博客，新的访客量到现在为止才800多，其中绝大多数都是我自己调试页面刷新时点出来的。\n对啊博客就是用来记录生活的，所以就让“因为看不惯以前的自己写的啥也不是的水文最终将其全部删掉”也成为博客记录下的一件事吧。\n"},{"title":"51单片机习题整理","url":"/posts/learn-mcs8051/","content":"\n\n赶在期中考试(骑磨烤柿)前把单片机的课后习题整理出来...\n(实在是没什么可拿来更新博客的了, 就干脆写点复习资料吧...)\n\n\n\n\n本篇内容为作者整理资料所得, 仅供学习使用。如需转载请务必遵循CC BY-NC-ND 4.0协议。\n请勿将本篇内容作为权威的教学辅导资料使用, 因无法保证100%准确, 仅供参考。\n如果发现了本篇存在的错误, 欢迎在页面下方提issue指正。\n本篇文章使用MathJax显示数学公式，在使用RSS阅读器时会出现无法正确显示的情况。\n\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"春はゆく\",\n        artist: \"Aimer\",\n        url: \"https://music.starry-s.me/music/obj_wonDkMOGw6XDiTHCmMOi_1630142819_fc9d_8785_4c2c_8abd7ec40b9695cbf53de173e782f195.m4a\",\n        cover: \"https://music.starry-s.me/music/cover/109951164785068521.jpg\",\n        lrc: \"\",\n        theme: \"#25AFF5\"\n    }]\n});\n \n\n硬件结构&amp;指令系统\n\n8051复位后从地址0000H开始执行程序, SP的值为07H。\nPC: 两字节(16位)寄存器, 也称程序计数器。\nSP: 堆栈指针, 指示出堆栈顶部在内部RAM块中的位置。\n单片机的堆栈设在了内部RAM区, 单片机复位后, SP中的内容为07H(指向第0组工作寄存器的R7), 堆栈实际上从08H开始。\n若SP被初始化为39H, 则堆栈实际上是从3AH开始的。\n执行LCALL addr16指令时，单片机先将PC的低字节压栈，再将PC的高字节压栈，最后把转移地址送入PC中。\n与之类似的LJMP类无条件转移指令，单片机只修改PC的值，并不堆栈保存跳转前的PC中保存的地址。\n执行RET指令后, SP值减2 (因为PC为2字节寄存器), 进行两次出栈操作，第一次出栈送PC的高位，第二次出栈送PC的低位。\n中断服务程序结束指令RETI不仅将堆栈中保存的2字节地址分别送入PC的高位和低位中，而且复位中断系统。因此RET和RETI不同。\nRET和RETI对堆栈的操作是相同的。\n\nPSW中的RS1 RS0=10B时, R2的RAM地址为12H。\nPSW： 程序状态字寄存器, 从PSW.7至PSW.0分别为Cy(进位标志位), Ac(辅助进位标志位), F0(标志位), RS1和RS0(寄存器区选择控制位), OV(溢出位), 保留位, P(奇偶标志位, 奇数为1, 偶数为0)。\n\n\n\n\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nPSW\nCy\nAc\nF0\nRS1\nRS0\nOV\n\nP\n\n\nRS1 RS0 = 10B时, 使用第二组工作寄存器区, 第0组工作寄存器区R0-R7的地址为00H-07H, 第1组为08H-0FH, 第2组为10H-17H, 第3组为18H-1FH(每组长度为8个字节, 每个寄存器占1个字节)。\n因此, 当A为01110010B时, PSW中P为0(偶数个1)。\nINC A指令不改变PSW中的Cy，只有可能改变奇偶标志位P。\n假设PSW为18H, 即00011000B, 此时使用第3组工作寄存器, R0地址为18H, R7地址为1FH。\n复位后, 默认选择的寄存器区是0区。\n\n8051片外数据存储器的寻址空间为0000H~0FFFFH\n\n位地址07H位于字节地址20H, 位地址7FH位于字节地址2FH。\n片内RAM中20H~2FH这16个单元即可进行共128位的位寻址, 也可进行字节寻址。\n字节地址及其位地址见下表所示：\n\n\n\n字节地址\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\n2FH\n7FH\n7EH\n7DH\n7CH\n7BH\n7AH\n79H\n78H\n\n\n2EH\n77H\n76H\n75H\n74H\n73H\n72H\n71H\n70H\n\n\n2DH\n6FH\n6EH\n6DH\n6CH\n6BH\n6AH\n69H\n68H\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n21H\n0FH\n0EH\n0DH\n0CH\n0BH\n0AH\n09H\n08H\n\n\n20H\n07H\n06H\n05H\n04H\n03H\n02H\n01H\n00H\n\n\n因此00H~07H位于字节地址20H, 78H-7FH位于字节地址2FH。\n除此之外，一些特殊功能寄存器（SFR）可进行位寻址（字节地址能够被8整除），SFR中位地址有83个（共有88个，5个未用），能够位寻址的SFR的字节地址末位均为0H或8H。\n\n访问外部存储器时, P0口用来传输低8位地址和数据, P2口用来传送高8位地址。\n\n访问外部存储器时, ALE的输出用于锁存低8位地址。\n\n一个机器周期为12个震荡周期\n\n为保证读入数据正确, 在读一个端口引脚之前应先向相应的端口锁存器写1。\n如果在读一个端口引脚之前向对应的输出锁存器写了0, 将总是读到0。\n8051访问片外存储器时, 利用ALE信号锁存来自P0的低8位地址信号。\n\n只能用直接寻址方式访问特殊功能寄存器。\n如果为8052单片机, 在访问高128字节的RAM时, 只能用间接寻址方式寻址。\n访问片外数据存储器64Kbyte时, 使用DPTR做间接寻址寄存器。\n使用MOVX @DPTR类指令访问外部扩展存储器时, P2口输出高8位地址, P0口传送低8位地址和数据。\n8051中, PC和DPTR都用于提供地址时, PC是用户程序不可访问的, DPTR可以分为两个8位寄存器DPH和DPL使用。\n\n累加器A的值为30H, 指令MOVC A, @A+PC位于地址3000H。执行该指令时, 程序存储器地址3031H的内容被传送至累加器A。\n\n\n   指令MOVC A, @A+PC长度为1字节, 位于地址3000H, 因此PC值为3001H, 故A+PC为3031H。\n\n设SP的值为5FH, 指令LCALL DELAY所在地址为2030H, 子程序DELAY所在地址为20A0H, 则该指令完成的操作是将地址2033H压入堆栈保存, 将地址20A0H送入PC, SP的值应在该指令执行结束后变成61H。\n\n   单片机执行子程序或中断服务程序时, 需要保护现场, 即将PC当前的值压栈保存, 当子程序或中断服务程序运行结束后再进行出栈。(所以如果子程序修改了栈的内容, 在子程序运行结束后程序有可能会运行错误)。\n   PC是16字节寄存器, 所以SP需要加2, 以此分别保存PC的高、低8位的数据。\n   LCALL addr16这条指令占3字节, 其中addr16占两字节, 因此程序可跳转64KB范围内的地址。\n   (ACALL指令只能跳转当前所在的2K范围内的地址, 如果不涉及到片外数据存储器的话, 通常只用SJMP和AJMP)\n\n在网上搜到的答案「将3500H送入PC」是错误的, 实际是将20A0H送入PC, 因为DELAY所在的地址为20A0H, 和3500H一点关系都没有。\n\n\nMOVC访问 程序(ROM) 存储器, MOVX指令访问 外部数据 存储器。\n\n   MOVC为查表指令, 只有MOVC @A+PC和MOVC @A+DPTR这两条, 均为单字节指令。\n   MOVX用于累加器A与外部数据存储器进行传送。\n   可以是MOVX A, @DPTR, MOVX A, @Ri, MOVX @DPTR, A, MOVX @Ri, A，其中i为0或1.\n   当使用MOVX @Ri类指令时，只有P0口用来传送地址和数据，P2口的状态不会发生改变，因此可使用MOV P2, #12H指令设定高8位的地址。\n   当采用Ri作间接寻址时, 只能寻找片外256个单元的数据存储器, 此时8位地址和数据均由P0口传送，P2口的状态不发生改变。\n\n假设指令DJNZ R7, rel位于005FH, 如果在执行该指令前寄存器R7值为00H, 偏移量rel为02H, 则该指令执行后下一条要执行的指令所在的地址是005FH。\n\n   DJNZ R7, rel位于005FH, 该指令长度为2字节 (书上写的3字节是错的), 所以在执行这条指令开始时PC值在原来的基础上 + 2 变为0061H。又因为rel为02H, 所以执行这条指令后, PC值变为0063H。\n\n分析下面子程序的功能, 假设8051单片机的震荡频率为6MHz。\n\n  DL: MOV R7, #0AH\n  L0: MOV R6, #250\n  L1: NOP\n     NOP\n     DJNZ R6, L1\n     DJNZ R7, L0\n     RET\n\n  R7为10, R6为250, 因此两个NOP加上一个DJNZ一共循环了250次, 该250次的循环一共执行了10次。\n  NOP为1周期指令, DJNZ为2周期指令, 两个NOP加一个DJNZ共4周期。\n  6MHz下一个机器周期为 $12 \\div (6 \\times 10^6)= 2{\\mu}s$, 12MHz下一个机器周期为1微秒。\n  故程序该子程序延时了$(4 \\times 250 \\times 10 \\times 12) \\div (6 \\times 10^6) = 20(ms)$。\n  (实际上有10次MOV R6, #250和10次DJNZ R7, L0造成的30个机器周期的约0.6ms的误差)\n\n\n以下部分写于2020年11月25日\n\n汇编语言程序\n\n编写一个子程序, 将内部RAM 40H~4FH的内容复制到50H~5FH。\nCOPY: MOV R0, #40H\n      MOV R1, #50H\n      MOV R2, #10H\n      ; 40H~4FH一共复制了16次\nLOOP:\n      MOV A, @R0\n      MOV @R1, A\n      INC R0\n      INC R1\n      DJNZ R2, LOOP\n      RET\n\n因为没有MOV @RX, @RX这条指令, 所以用A做数据的中转站。\n\n将任何无符号8位二进制数转换为BCD码的子程序, 入口参数为内部RAM单元20H, 出口参数为内部RAM单元30H和31H, 30H存放百位数, 31H存放十位数和个位数。\nCV:\nMOV R0, #20H\nMOV A, @R0\nMOV B, #100\nDIV AB; A除以100, 得到的百位数存在A中\nMOV 30H, A\nMOV A, B\n\nMOV B, #10\nDIV AB\n\nSWAP A\nADD A, B; 也可以用ORL\nMOV 31H, A\nRET\n\nDIV AB和MUL AB的A和B之间没有逗号。\n\n内部RAM 30H单元存放两位十进制数 (压缩BCD码), 编写将该十进制数转换为对应ASCII码的子程序, 转换结果存放到内部RAM 40H (十位数) 和41H (个位数) 单元。\n\nASCII码： 30H为0, 41H为A, 61H为a\n\nCV:\nMOV A, 30H\nANL A, #0FH\nMOV DPTR, #DATA; 或者直接用ADD A, #30H即可\nMOVC A, @A+DPTR\nMOV 41H, A\n\nMOV A, 30H\nSWAP A\nANL A, #0FH\nMOVC A, @A+DPTR\nMOV 40H, A\n\nRET\n\nDATA:\nDB 30H, 31H, 32H, 33H, 34H, 35H, 36H, 37H, 38H, 39H\n\n\n8个8位数相加, 求平均值, 入口地址为30H~`37H, 结果存到40H`。\n把8位数相加存在溢出, 所以把相加结果以16进制存到R2、R3中, 再除以8( 右移3次), 即可求得不四舍五入的平均值。\nMOV R0, #30H\nMOV R1, #08H\nMOV R2, #00H\nMOV R3, #00H\n; 初始化\nLOOP:\nCLR C\nMOV A, @R0\nADD A, R3\nMOV R3, A\nJNC SKIP\nINC R2\nSKIP:\nINC R0\nDJNZ R1, LOOP\n\n这样结果被保存到R2、R3中, 然后需要写一个循环右移3位的程序。\nMOV R4, #03H\nLOOP2:\nRRC R2\nRRC R3\nDJNZ R4, LOOP2\n\nMOV 40H, R3\n; 右移3次后R2的低4位为0, 结果保存在R3中\n\n这样R3中求得的是不带四舍五入的结果。\n如果需要带四舍五入的话第一种方法是判断最后一次右移时最低位是否为$1$， ($1 / 2 = 0.5$)。\nMOV R4, #03H\nLOOP2:\nRRC R2\nRRC R3\nDJNZ R4, LOOP2\n\nJNC SKIP2\nINC R3\nSKIP2:\nMOV 40H, R3\n; 右移3次后R2肯定为0\n\n这样是带四舍五入的结果。\n第二种方法，8个8位数相加求平均值，要求四舍五入的话，只需要在这8个数求和后再加4（0100B），之后右移3次。\nADD A, #04H\nMOV R3, A\nJNC SKIP2\nINC R2\n\nSKIP2:\nMOV R4, #03H\nLOOP2:\nRRC R2\nRRC R3\nDJNZ R4, LOOP2\n\n结果保存在R3中。\n\n\n\n中断系统\n\n8051的外部中断有低电平触发和下降沿触发两种触发方式。外部中断1的中断向量地址是0013H。\n在响应中断时, 单片机自动生成一条长调用指令LCALL addr16, 其地址为中断入口地址。\n\n\n\n中断源\n入口地址\n\n\n\nINT0\n0003H\n\n\nT0\n000BH\n\n\nINT1\n0013H\n\n\nT1\n001BH\n\n\n串行口\n0023H\n\n\n通常在中断入口地址处放一条无条件转移指令*JMP。\n内部查询顺序同入口地址的顺序，由高到低。\n\n执行指令MOV IP, #0BH( #00001011B)后, 中断优先级最高者为PX0, 最低为PS。\nIP: 中断优先级寄存器, 其前3为无意义, 后5位( IP.4至IP.0)为：PS, PT1, PX1, PT0, PX0, 分别对应串行口、定时器T1、外部中断1、定时器0、外部中断0。\n\n\n\n\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nIP\n\n\n\nPS\nPT1\nPX1\nPT0\nPX0\n\n\n单片机复位以后, IP的内容为0, 各个中断源均为低优先级中断。\n在同时收到几个同一优先级的中断请求时, 中断响应取决于内部查询顺序, 其顺序由高到低为：INT0、T0、INT1、T1、串行口。\n当中断源均为同一优先级时, 当它们同时申请中断时CPU首先响应外部中断0\n\n8051的晶振频率为12MHz, 则最短的外部中断响应时间为3${\\mu}$s, 最长的外部中断响应时间为12${\\mu}s$。\n\n中断标记位于单片机寄存器的TCON和SCON中。\n\n\n\n\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nTCON\nTF1\nTR1\nTF0\nTR0\nIE1\nIT1\nIE0\nIT0\n\n\nSCON\nSM0\nSM1\nSM2\nREN\nTB8\nRB8\nTI\nRI\n\n\nTCON中TF1和TF0为定时器/计数器中断标志位, TR1和TR0为定时/计数启动位, IE1和IE0为外部中断标志位, IT1和IT0为选择外部中断为边沿触发(1)还是电平触发(0)方式。\nSCON中前几位与串行口有关，第1位和第2位的TI和RI(是大写字母I不是数字1)分别为串行口中断发送中断请求标志位(发送成功后置1)和接受中断请求标志位( 接受成功后置1)。串口中断无法硬件清零, 只能软件清零。\n当IE中EA为1、ES为1时，TI或RI为1时，CPU执行无条件转移指令LJMP 0023H, 执行串行口中断服务程序。\n\n要使8051能够响应定时器T1的中断和串行口中断, 不响应其他中断, 则中断允许寄存器IE的内容为98H(10011000B)。\n中断允许寄存器IE：\n\n\n\n\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nIE\nEA\n\n\nES\nET1\nEX1\nET0\nEX0\n\n\nEA为总控制位, 当EA为1时, CPU才可以响应中断请求。\nES为串行口中断允许位, ET1和ET0为定时器中断允许位, EX1和EX0为外部中断允许位。\n\n\n\n定时器和计数器\n\n使T0工作方式1的溢出周期最长的初值是0000H。\n定时器/计数器工作在方式0为13位计数器, 由TLX的低5位和THX的高8位组成13位计数器, 最大值为$2^{13}-1 = 8191$, 晶振频率12MHz下计时周期最长为8.192ms。工作在方式1时由均为8位的TLX和THX组成16位计数器, 最大值为65535, 晶振频率为12M下最长为65.536ms。\n当定时器/计数器工作在方式2时, 可以循环定时/计数。当计数溢出后, 自动将8位的THX装入8位的TLX中, 可省去重装初值的时间, 最大值为255, 晶振频率12M下计时周期最长为0.256ms。\n\nT1配置为方式3时, 停止计数, 方式3只适用于定时器0。\n定时器T0的方式3将其分为两个8位定时器, 其中TH0只能做定时器使用。\n\n设8051单片机的晶振频率为12MHz, 定时器作计数器使用时, 其计数输入信号的最高频率为500KHz。\n当定时器用作计数器时, 当检测到引脚上的负跳变时计数器的值增一。检测下降沿需要2个机器周期, 即24个震荡周期, 所以输入信号最高频率为 $12M \\div 24 = 500KHz$。\n\n用定时器方式2扩展一个下降沿触发的外部中断, 计数初值应为FFH。\n此处定时器2以计数器方式运行, 当检测到一个下降沿后, 计数器加一后溢出, 因此会执行定时器中断的中断子程序。\n\n\n\n\n2020年12月3日：\n前两天感冒, 休息了几天(打了两天的游戏)后继续。\n\n串行口\n\n串行口TXD为高电平, 表示这是数据位或停止位或空闲状态。\n串行口工作在方式1时, TXD用来发送数据、RXD用来接受数据。方式1的一帧数据为10位, 起始为为0, 停止位为1, 数据位和空闲状态均可能为0或1。\n\n串行口工作在方式3时, 发送的第9位数据要事先写入寄存器SCON的TB8, 接收的第9位数据被写入同一寄存器的RB8。\n串行口控制寄存器SCON：\n\n\n\n\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nSCON\nSM0\nSM1\nSM2\nREN\nTB8\nRB8\nTI\nRI\n\n\n其中SM0、SM1为串口的工作方式选择位, 方式0为同步移位寄存器方式, 方式1为8位异步收发, 方式2和方式3为9位异步收发。\n波特率：串行口每秒钟传送的比特位数，单位bits/s。\n方式0的波特率固定为 $f_{osc}/12$, 方式2的波特率为 $f_{osc}/64$ 或 $f_{osc}/32$ (由SMOD控制)。\n方式1的波特率和方式3的波特率可变, 公式为 $(2^{SMOD} / 32) \\times 定时器T1的溢出率$。\nT1的溢出率为定时器T1的周期的倒数，定时器的周期为\n$$T = \\frac{12\\times (2^n - X )}{f_{osc}}$$\n当T1工作在方式2时，n为8，波特率为：\n$$波特率=\\frac{(2^{SMOD} \\div 32) \\times f_{osc}}{12 \\times (256 - X)}$$\n$X$为定时器T1的初值。\n串口工作在方式1，波特率为2400，则每秒钟最大能发送/接收 $2400 \\div 10 = 240Byte$的数据。\n\n单片机工作在方式1时, 1帧数据为1个起始位、8个数据位、1个停止位共10位。\n\n8051的UART工作在方式3，要求每秒钟能传送不少于900个字节的数据，则波特率应当大于 $900 \\times 8 = 7200bits/s$。\n\n比特率2400Kbits/s，时钟频率12M，PC机发送8个字节的数据存到单片机的30H-37H中，随后单片机发送2个确认字节55H和AAH给PC机，使用查询方式。\nORG 0000H\nMAIN:\nMOV SCON, #50H\n; 串口使用方式1，且允许接收\nMOV PCON, #00H\n; 波特率不加倍\nMOV TMOD, #20H\n; 定时器1使用方式2\n\nMOV TL1, #0F3H\nMOV TH1, #0F3H\nSETB TR1\n\nLOOP:\nMOV R0, #30H\nMOV R1, #08H\n\nREC:\nJNB RI, $\nMOV @R0, SBUF\nCLR RI ; 软件清零RI\nINC R0\nDJNZ R1, REC\n\nMOV SBUF, #55H\nJNB TI, $\nCLR TI\n\nMOV SBUF, #0AAH\nJNB TI, $\nCLR TI\nAJMP LOOP\n\nEND\n\n单片机接收到数据后，RI被置1，代表SBUF中的数据有效，取走SBUF中的数据后需要软件清零RI（串口中断不会自动清零RI）。\n当单片机执行写SBUF操作时，串口发送开始，TI被自动置1，在发送完成后TI被自动清0。\n\n\n\n\n2020年12月7日：\n\nI/O口 &amp; 外部存储器拓展\n\n8051使用指令MOVX A, @R0读外部数据存储器时，不起作用的信号是WR。\n8051在使用MOVX @DPTR类指令读外部数据存储器时，P0和P2先输出外部数据的地址，单片机发出的ALE信号的负跳沿将P0口输出的地址锁存在地址锁存器(74HC573)里，之后单片机发出RD信号，读取外部数据存储器（RAM）的数据到总线再传送到P0口上。最后单片机从P0口读取数据保存到A中。\n如果是写外部数据存储器时，单片机将不发出RD信号而是WR信号，将A中的数据写入外部数据存储器中。\n\n存储器芯片6264需要13根地址线。\n62256的容量为 $256Kbit \\div 8 = 32KB = 2^{15}$, 需要15根地址线。\n6264的容量为 $64Kbit \\div 8 = 8KB = 2^{13}$，所以需要13根地址线。\n6116容量为 $16Kbit \\div 8 = 2KB = 2^{11}$, 需要11根地址线。\n计算方法是62$X$的 $容量=X \\div 8(K)$。\n\n使用16位地址模式时，8051的外部数据存储器寻址空间为64KB。\n\n基于8051的单片机系统能拓展的外部数据存储器容量无限制。\n有的书上说最大只能拓展64KB，实际是最大寻址空间为64KB，拓展的外部数据存储器容量无限制。\n\n8051的程序存储器可用来存放用户程序和数据。 例如使用DW或DB指令用来定义数据。\n所以应用程序也可以使用MOVC A, @A+DPTR访问程序存储器中的数据。\n\n\n\n除此之外LED数码管和外部存储器拓展、外部I/O设备拓展部分有很多需要根据线路图计算地址和DA转换的题，因为线路图源自老师提供的PDF，而老师为PDF加了密码，意味着不允许外传，所以我就不放到博客上面了，除非我自己用Porteus画一个类似的\n\n\nLED段码入口地址8004H，位选入口地址8002H，将30H-32H保存的6个压缩BCD码发送到6位共阴极数码管上显示， 要求编写延时1ms的子程序。\nMAIN:\nMOV R0, #30H\n; R2用来计数\nMOV R2, #03H\n; R3用来位选\nMOV R3, #01H\n\nLOOP:\nMOV A, @R0\nSWAP A\nANL A, #0FH\nMOV DPTR, #TAB\nMOVC A, @A+DPTR\n; 取高4位BCD码对应的段码\n\nMOV DPTR, #8004H\nMOVX A, @A+DPTR\n; 先送段码\n\nMOV A, R3\nMOV DPTR, #8002H\nMOVX @DPTR, A\nRL A\nMOV R3, A\n; 再送位选\n\nLCALL DELAY\n\nMOV A, @R0\nANL A, #0FH\nMOV DPTR, #TAB\nMOVC A, @A+DPTR\n; 取低4位BCD码对应的段码\n\nMOV DPTR, #8004H\nMOVX A, @A+DPTR\n; 送段码\n\nMOV A, R3\nMOV DPTR, #8002H\nMOVX @DPTR, A\nRL A\nMOV R3, A\n; 送位选\n\nLCALL DELAY\nINC R0\n\nDJNZ R2, LOOP\n\nDELAY:\nMOV R7, #250\nDL:\nNOP\nNOP\nDJNZ R7, DL\nRET\n\nTAB:\nDB 3FH, 06H, 5BH, 4FH, 66H, 6DH, 7DH, 07H, 7FH, 6FH\n\nEND\n\n\n打印机数据输入接口和P1直接相连，STB接口和P3.4相连，BUSY接口和P3.3相连，不使用ACK应答信号，编写将外部存储器1000H-100FH的数据发送到打印机打印的子程序。\n\n \n\n\n\nPRINT:\nMOV DPTR, #1000H\nMOV R2, #10H\n\nLOOP:\nJB P3.3, $\n; 确保打印机处于空闲状态\nMOVX A, @DPTR\nMOV P1, A\nCLR P3.4\nSETB P3.4\nINC DPTR\nDJNZ R2, LOOP\nRET\n\n如果打印机没有和P1直接相连，而是连接到数据锁存器上（74HC374），锁存器的时钟信号的入口地址为A000H。\n使用堆栈保护间接寻址寄存器的值。\nPRINT:\nMOV R2, #10H\nMOV DPTR, #1000H\nLOOP:\nJB P3.3, $\n; 确保打印机处于空闲状态\n\nMOVX A, @DPTR\nPUSH DPL\nPUSH DPH\nMOV DPTR, #0A000H\nMOVX @DPTR, A\nPOP DPH\nPOP DPL\n\nCLR P3.4\nSETB P3.4\nINC DPTR\nDJNZ R2, LOOP\nRET\n\n\n\n\nSFR列表\n\n\n\n87H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nPCON\nSMOD\n-\n-\n-\n-\n-\nPD\nIDL\n\n\n\n\n\n\n\n88H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nTCON\nTF1\nTR1\nTF0\nTR0\nIE1\nIT1\nIE0\nIT0\n\n\n\n\n\n\n\n89H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nTMOD\nGATE\nC/T\nM1\nM0\nGATE\nC/T\nM1\nM0\n\n\n\n\n\n\n\n98H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nSCON\nSM0\nSM1\nSM2\nREN\nTB8\nRB8\nTI\nRI\n\n\n\n\n\n\n\nA8H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nIE\nEA\n-\n-\nES\nET1\nEX1\nET0\nEX0\n\n\n\n\n\n\n\nB8H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nIP\n-\n-\n-\nPS\nPT1\nPX1\nPT0\nPX0\n\n\n\n\n\n\n\nD0H\nD7\nD6\nD5\nD4\nD3\nD2\nD1\nD0\n\n\n\nPSW\nCy\nAc\nF0\nRS1\nRS0\nOV\n-\nP\n\n\n\n"},{"title":"惠普光影精灵4在Arch Linux下使用Optimus Manager配置双显卡","url":"/posts/archlinux-pavilion-gaming-laptop/","content":"\n\n自从高中毕业至今这台笔记本用了将近两年, 已经记不清当初为什么买了这台笔记本, 刚买来电脑第一次装Arch Linux时遇到了一些坑, 不过大多数的问题Google折腾一会或随着后续的软件更新基本上就都解决了, 唯独配置双显卡这个问题在用了两年后才算是找到了比较满意的解决方法（大概是）, 尽管现在这电脑已经停产了, 就算有人买了这台电脑也不一定会拿他装Arch Linux, 不过我还是打算把这个问题的解决过程记录一下（本篇讲的方法应该是适用于大多数N卡+i卡的笔记本电脑的, 只是有些细节不一样）, 以备我后续重装系统时有个参考。\n\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"Kaleidoscope\",\n        artist: \"Vicetone / Grace Grundy\",\n        url: \"https://music.starry-s.me/music/560e_0558_060b_adc45c798222ffa86a4d1a0cb6ddf18f.m4a\",\n        cover: \"https://music.starry-s.me/music/cover/18671906464338403.jpg\",\n        lrc: \"\",\n        theme: \"#A26208\"\n    }]\n});\n \n\n先描述一下踩坑经过\n\n本段略微有些废话, 可以跳过\n\n记得在刚买来这台笔记本（2018年夏）, Linux内核还没升到5.0的时候, 使用live CD装系统时会遇到lspci卡死, 关机的时候会卡死的问题, 查系统日记都是一堆ACPI的报错。当时网上查了一下大概是内核和驱动一些bug, 没找到解决办法, Google到论坛的帖子说是在关机/重启发生卡死时只能直接长按电源关机就（找不到搜的回答了）\n装完系统后安装显卡驱动时想通过Bumblebee + bbswitch切换双显卡, 于是装了Gnome然后照着wiki配置完Bumblebee和bbswitch后重启电脑直接死机。\n经过多次重装系统的折磨后, 发现只装Bumblebee不装bbswitch不systemctl enable bumblebeed.service时, 能正常开机, 然后之前遇到的两个问题也莫名其妙就好了, 即系统重启关机不会卡死, lspci也正常了（迷）\n之后, 在不装bbswitch的情况下, 启动bumblebeed.service再用optirun和primusrun这种方式用独显运行程序都没有问题。\n当时因为电脑不装Bumblebee的话就没法正常关机, 于是就一直用着Bumblebee切换双显卡, 玩游戏性能比Windows下差一点, 别的都没啥问题。\n今年年初买了一块拓展屏想搞双显示器, 本来显示器应该插上HDMI直接就能用的, 但是因为这电脑的HDMI走的独显输出, Bumblebee不能直接用, wiki上教的创建个intel的虚拟输出啥的方法有试过但是没成功, 于是又Google了一下后卸了Bumblebee改用NVIDIA Optimus 只使用独显的方式, 这样双显示器倒是能用了, 但是如果笔记本只用电池没连着拓展屏的时候还跑着独显这也太费电了。\n所以最后找到了能切换显卡的Optimus Manager。\n\n查了一下这款电脑的type-c接口支持DP1.2视频输出，和HDMI 2.0一样支持4K 60fps，走的是intel集成显卡，可以在独显不通电的时候输出画面到第三方显示器。所以买一根type-c转DP线就可以点亮第三方显示器（前提是你的显示器有DP接口），但是切换显卡还是得依靠Bunblebee或Optimus Manager这类的软件。\n\n安装过程\n照着Wiki和Optimus Manager的README。首先安装好显卡驱动相关的软件, 如果有Bumblebee的话使用systemctl disable bumblebeed停用。\n首先清除（记得备份）/etc/X11/xorg.conf.d/下的配置文件, 并删掉（记得备份）/etc/X11/xorg.conf（如果有的话）, 因为Optimus Manager会自动生成配置文件存放到/etc/X11/xorg.conf.d/里面, 所以建议安装前把显示配置相关的文件都清除掉。\n使用Arch Linux CN源或者通过AUR Helper安装optimus-manager。\n# Arch Linux CN\n$ sudo pacman -S optimus-manager\n# AUR\n$ yay -S optimus-manager\n\n因为我用的Gnome, 参照README中说的卸载掉gdm并安装gdm-primeAUR。（国内下载源代码的速度极慢建议挂梯子, 或者挂梯子克隆GDM的代码到~/.cache/yay/gdm-prime/gdm下。）\n修改/etc/gdm/custom.conf, 移除WaylandEnable=false一行前面的#禁用Wayland而使用X。\n修改配置文件\n$ sudo cp /usr/share/optimus-manager.conf /etc/optimus-manager/optimus-manager.conf\n\n不要编辑/usr/share/下的文件, 编辑/etc/optimus-manager/optimus-manager.conf, 将切换方式设为switching=none, 不推荐使用bbswitch（见后续第一条）, 设置pci_power_control=yes让PCI Power Management切换显卡。\n之后根据需求来修改开机自动选择显卡：\nstartup_mode=auto\nstartup_auto_battery_mode=intel\nstartup_auto_extpower_mode=nvidia\n\n这里我设置的是用电池时使用集成显卡, 用电源时使用独显。\n最后贴一下全部的配置文件, 除了上述的几处修改以外其他均为默认值, 仅供参考。\n\n# Leave blank for the default (the above command will not be run).\nDPI=96\n\n# If you're running an updated version of xorg-server (let's say to get PRIME Render offload enabled),\n# the nvidia driver may not load because of an ABI version mismatch. Setting this flag to &quot;yes&quot;\n# will allow the loading of the nvidia driver.\nignore_abi=no\n\n# Set to yes if you want to use optimus-manager with external Nvidia GPUs (experimental)\nallow_external_gpus=no\n\n# Comma-separated list of Nvidia-specific options to apply.\n# Available options :\n# - overclocking : enable CoolBits in the Xorg configuration, which unlocks clocking options\n#   in the Nvidia control panel. Note: does not work in hybrid mode.\n# - triple_buffer : enable triple buffering.\noptions=overclocking\n\" data-info=\"language-conf\" data-lang=\"conf\" class=\"code-block\">[optimus]\n\n# This parameter defines the method used to power switch the Nvidia card. See the documentation\n# for a complete description of what each value does. Possible values :\n#\n# - nouveau : load the nouveau module on the Nvidia card.\n# - bbswitch : power off the card using the bbswitch module (requires the bbswitch dependency).\n# - acpi_call : try various ACPI method calls to power the card on and off (requires the acpi_call dependency)\n# - custom: use custom scripts at /etc/optimus-manager/nvidia-enable.sh and /etc/optimus-manager/nvidia-disable.sh\n# - none : do not use an external module for power management. For some laptop models it's preferable to\n#          use this option in combination with pci_power_control (see below).\nswitching=none\n\n# Enable PCI power management in Intel mode.\n# This option is incompatible with acpi_call and bbswitch, so it will be ignored in those cases.\npci_power_control=yes\n\n# Remove the Nvidia card from the PCI bus.\n# May prevent crashes caused by power switching.\n# Ignored if switching=nouveau or switching=bbswitch.\npci_remove=yes\n\n# Reset the Nvidia card at the PCI level before reloading the nvidia module.\n# Ensures the card is in a fresh state before reloading the nvidia module.\n# May fix some switching issues. Possible values :\n#\n# - no : does not perform any reset\n# - function_level : perform a light \"function-level\" reset\n# - hot_reset : perform a \"hot reset\" of the PCI bridge. ATTENTION : this method messes with the hardware\n#         directly, please read the online documentation of optimus-manager before using it.\n#         Also, it will perform a PCI remove even if pci_remove=no.\n#\npci_reset=no\n\n# Automatically log out the current desktop session when switching GPUs.\n# This feature is currently supported for the following DE/WM :\n# KDE Plasma, GNOME, XFCE, LXDE, Deepin, i3, Openbox, AwesomeWM, bspwm\n# If this option is disabled or you use a different desktop environment,\n# GPU switching only becomes effective at the next graphical session login.\nauto_logout=yes\n\n# GPU mode to use at computer startup. Possible values: nvidia, intel, hybrid, auto\n# \"auto\" is a special mode that auto-detects if the computer is running on battery\n# and selects a proper GPU mode. See the other options below.\nstartup_mode=auto\n# GPU mode to select when startup_mode=auto and the computer is running on battery.\n# Possible values: nvidia, intel, hybrid\nstartup_auto_battery_mode=intel\n# GPU mode to select when startup_mode=auto and the computer is running on external power.\n# Possible values: nvidia, intel, hybrid\nstartup_auto_extpower_mode=nvidia\n\n\n[intel]\n\n# Driver to use for the Intel GPU. Possible values : modesetting, intel\n# To use the intel driver, you need to install the package \"xf86-video-intel\".\ndriver=modesetting\n\n# Acceleration method (corresponds to AccelMethod in the Xorg configuration).\n# Only applies to the intel driver.\n# Possible values : sna, xna, uxa\n# Leave blank for the default (no option specified)\naccel=\n\n# Enable TearFree option in the Xorg configuration.\n# Only applies to the intel driver.\n# Possible values : yes, no\n# Leave blank for the default (no option specified)\ntearfree=\n\n# DRI version. Possible values : 2, 3\nDRI=3\n\n# Whether or not to enable modesetting for the nouveau driver.\n# Does not affect modesetting for the Intel GPU driver !\n# This option only matters if you use nouveau as the switching backend.\nmodeset=yes\n\n[nvidia]\n\n# Whether or not to enable modesetting. Required for PRIME Synchronization (which prevents tearing).\nmodeset=yes\n\n# Whether or not to enable the NVreg_UsePageAttributeTable option in the Nvidia driver.\n# Recommended, can cause poor CPU performance otherwise.\nPAT=yes\n\n# DPI value. This will be set using the Xsetup script passed to your login manager.\n# It will run the command\n# xrandr --dpi &lt;DPI&gt;\n# Leave blank for the default (the above command will not be run).\nDPI=96\n\n# If you're running an updated version of xorg-server (let's say to get PRIME Render offload enabled),\n# the nvidia driver may not load because of an ABI version mismatch. Setting this flag to \"yes\"\n# will allow the loading of the nvidia driver.\nignore_abi=no\n\n# Set to yes if you want to use optimus-manager with external Nvidia GPUs (experimental)\nallow_external_gpus=no\n\n# Comma-separated list of Nvidia-specific options to apply.\n# Available options :\n# - overclocking : enable CoolBits in the Xorg configuration, which unlocks clocking options\n#   in the Nvidia control panel. Note: does not work in hybrid mode.\n# - triple_buffer : enable triple buffering.\noptions=overclocking\n\n食用方法\noptimus-manager --switch nvidia切换到独显（nvidia）\noptimus-manager --switch intel切换到集显（intel）\n安装mesa-demos后, 使用glxinfo | grep \"OpenGL renderer\"查看当前正使用的显卡\n其他用法参见Usage。\n注意：\n\n切换显卡的过程中会自动注销登录, 所以记得保存并关掉电脑正在运行的程序。\n\n你可以在配置文件中修改auto_logout=false禁止自动注销以手动注销切换显卡。\n\n\nOthers\n\n之所以不推荐使用bbswitch是因为容易遇到ACPI锁死的问题, 参考Wiki, 需要添加内核参数acpi_osi=! acpi_osi=\"Windows 2009\"或acpi_osi=\"!Windows 2015\"启动, 如果你遇到了锁死可以通过开机时在启动加载器界面编辑添加内核参数来正常进入系统, 如果你用的是efistub或者没办法编辑内核参数的话就只能用live CD救你的电脑了。\n\n如果用不了lspci, 电脑没法正常关机的话, 是nouveau的问题, 可添加内核参数modprobe.blacklist=nouveau禁用。\n\n因为前几天改配置文件时又踩了一遍锁死的坑, 于是用最新的(2020.07.01)live CD救砖时, 惊喜的发现在live环境下lspci和关机都不会卡死了, 貌似是新版内核修复了这个bug\n\n在切换显卡自动注销后, gdm界面有时不会自动加载出来而是一直黑屏, 这时需要手动切换到tty2再切回tty1才能加载出来。\n\n如果显示器支持DDC/DI，可以参考Wiki使用命令调节显示器亮度。\n\n(本条与配置显卡无关) 因为电脑用的intel网卡, 如果遇到蓝牙耳机无法连接的情况, 安装pulseaudio和pulseaudio-modues-bt等耳机需要的蓝牙组件, 照着Wiki上的禁用Bluetooth coexistence解决此问题。\n\n\n\n\n    \n\n"},{"title":"Spring - 3","url":"/posts/spring-3/","content":"\n\n\n多图预警\n\n\n\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"辉く空の静寂には\",\n        artist: \"Kalafina\",\n        url: \"https://music.starry-s.me/music/4d6b_af91_c8ab_7e676adf998cd77b5d6b8a8e095d4066.mp3\",\n        cover: \"https://music.starry-s.me/music/cover/109951163710392062.jpg\",\n        lrc: \"\",\n        theme: \"#776666\"\n    }]\n});\n \n\n\n\n\n\n\n\n"},{"title":"一个人的旅行 —— 上海","url":"/posts/shanghai/","content":"\n\n\n  \n\n\n多图预警\n\n\n\n不要问我为什么过了这么久才把这篇文章码出来…\n\n\n \n\n\nconst ap0 = new APlayer ({\n    container: document.getElementById(\"aplayer0\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"光の旋律\",\n        artist: \"Kalafina\",\n        url: \"https://music.starry-s.me/music/Hikari_No_Senritsu.mp3\",\n        cover: \"https://music.starry-s.me/music/cover/Kalafina All Time Best 2008-2018 small.jpg\",\n        lrc: \"\",\n        theme: \"#444\"\n    }]\n});\n \n\n很久以前就有想去上海的念头了。\n最开始是打算在下一次BW举办的时候去上海的，不过想了想要是一整个寒假哪里都没去实在是不甘心，遂定机票简单的制定了计划和预算，开始了这趟旅行。\n准确点说不全是我一个人的旅行，只有去除掉和朋友一同坐了一趟飞机和磁悬浮（火车就不算了）后就剩下的就是一人的旅行了。\n上飞机前的晚上，我硬是没买卧铺票在火车的硬座上坐着熬了一晚上…全靠看Fate Zero熬过来的…\n之所以来上海是因为我很想看一下这么一座拥有B站总部和巨多B站大佬的城市是什么样子的，某些东西可能在大多数人眼里很平淡普通吧，但是我觉得很好玩。所以去迪士尼玩、登上海之巅、到野生动物园近距离看大老虎（fǔ）吃肉这些只能被我称作是本次旅行的附赠品，我当然不是只奔着这些去上海的，但别人问你你花了那么多钱出去旅游了一趟什么也没玩的话肯定会骂我的对吧。毕竟门票不贵买了也不吃亏。\n\n\n \n\n\nconst ap1 = new APlayer ({\n    container: document.getElementById(\"aplayer1\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"aquarium\",\n        artist: \"Víctor Vergara\",\n        url: \"https://music.starry-s.me/music/4098_d136_0a0a_ea008ceca6a370b79cdc52db597556d0.mp3\",\n        cover: \"https://music.starry-s.me/music/cover/1379887099097990.jpg\",\n        lrc: \"\",\n        theme: \"#3333aa\"\n    }]\n});\n \n\n -->\n\n没急着用Metro大都会手机刷码捶（雾）地铁是因为我更想试一下Apple Pay是怎么操作的（所以这也是我没有办为游客准备的地铁卡的原因），现在觉得我花了60块钱充Apple Pay真的是交智商税，无数次的被卡在炸鸡口出不去有一次手机出bug双击电源键弹不出钱包界面后面排了很长的队伍是怎样的感受可想而知。\n在此之前只坐过北京地铁和沈阳地铁，在地铁上站两个小时是什么感受只在上海体验过…\n墙裂推荐看一下上海轨交的鬼畜（雾），不然第一次坐地铁很容易迷路的（谜一样的逻辑）。\n第一次自己外出，或多或少会有失误的地方，除了像算错火车票时间退票改票多花点手续费之外，旅店选在了嘉定区着实麻烦了许多…\n因为当时我只知道市区的旅店贵，又不想住青年旅舍，就选个不在市中心但是离地铁站不太远的地方（事实上需要走三十分钟）…\n到后来才知道我住的地方离江苏好近啊，要是坐11号线支线就江苏花桥了，简直…\n\n不过旅店的窗子对面有猫！！！每天早晨拉开窗帘看到对面房顶有猫在晒太阳的感觉真的开心死了！\n\n\n\n\n -->\n\n \n\n\nconst ap2 = new APlayer ({\n    container: document.getElementById(\"aplayer2\"),\n    theme: \"#33363b\",\n    fixed: false,\n    listFolded: false,\n    listMaxHeight: false,\n    lrcType: false,\n    mini: false,\n    volume: 0.7,\n    order: \"list\",\n    loop: \"all\",\n    autoplay: false,\n    audio: [{\n        name: \"遊園施設\",\n        artist: \"帆足圭吾\",\n        url: \"https://music.starry-s.me/music/540b_075e_0453_cae9f8037d04c81f84993977b01792ec.m4a\",\n        cover: \"https://music.starry-s.me/music/cover/18710389371705314.jpg\",\n        lrc: \"\",\n        theme: \"#44aa44\"\n    }]\n});\n \n\n所以最漫长的就是坐11号线花了很长的时间才能从上海的嘉定到上海浦东的迪士尼…\n一个人去迪士尼的好处就是排队排到最后遇到需要一人凑数的时候我就能合法插队了啊好高兴啊当时（后来我才知道有些地方我一个人是可以直接走单人通道根本不用排队…）\n\n和一个小姐姐一起坐的创极速光轮，小姐姐被吓够呛，我全程没敢睁眼睛死死抓住把手猫在最后一排…\n在B站上看到有人用MC还原了迪士尼的创极速光轮：av13333369\n迪士尼的吃的真的香！就算是80多一根的大鸡腿还是有人排很长的队伍去买，就是真香，花了150买了一些吃的。\n排的最长的队是七个小矮人矿车，足足站了70分钟。\n除了泡泡龙冲天赛车我没敢坐，别的知名项目基本上都玩了一遍，但很可惜只玩了一遍。\n\n知道晚上有烟花的时候就决定了这一天待在迪士尼里不走了。\n夜光幻影秀真的是那种能看哭的震撼。\n印象最深的就是20：30幻影秀结束后好多人站在那里不想走，还有好多人在拍照。\n\n\n机智的我选择站在地铁门口等下一班车在屏蔽门打开后跑进去抢一个座，说着看起来很不要脸的行为，但是我的腿真的站不动了…\n如果是两个人一起去玩的话会更有意思么？\n\n\n上海之巅的风景很好，我去的那天不是很晴，远处的建筑看起来有些朦胧，不过不影响观景。\nVR体验区放着AlanWalker的Routine，听着自己喜欢的歌逛观光厅，很有意思的。\n\n陆家嘴附近的吃的是真贵，饿着肚子跑到别的地方吃的午饭...\n\n\n下午坐地铁去野生动物园。\n又回到了龙阳路地铁站。\n16号线分大站车小站车，大站车不停野生动物园站，当时差一点上错车。\n之前在知乎上见过有人吐槽16号线车厢内座椅设计的，等坐上车后才感受到这是真的挤…\n在16号线上查了英语四级的成绩，压线过，成绩不高不是很满意，不过想了想考试时自己在生病住院，算作是自己为自己找的一个借口吧。\n野生动物园站离动物园门口炒鸡远，走着去太耽误时间了。\n\n等走到动物园的时候已经下午2点多了，开电瓶车的司机总在提醒他们马上就下班了让我们赶紧逛剩下的景点这个很烦，所以最后我又走着在园区溜达了一遍。\n基本上把所有的动物都看了一边，表示我已经见过这些动物了，在公园里溜达一大圈。\n等逛完一大圈之后动物园里已经没几个人了，\n\n站在桥上看下面的天鹅，附近的音响在放AlanWalker的remix过的Faded，真的我很喜欢这首歌。\n最后花五块钱买包饲料喂天鹅，又买点玉米喂鸽子…\n\n\n\n晚上开始下雨，坐地铁回陆家嘴去了东方明珠，由于下雨玻璃上有很多水珠所以最初隔着窗子拍的照片都有些模糊。\n东方明珠还没有学生票…\n最开始觉得好亏，花了好多钱还拍不了照片，直到后来我到了下面的空中走廊...\n在迪士尼和别人撞衫就算了，第二天在东方明珠又撞衫，还是同一个人，啊世界真小。\n在东方明珠上待了很久，参观了一些其他项目，坐了一把VR过山车（正好赶上最后一趟），很晚才回到旅店。\n\n\n\n  \n\n\n第三天是先坐11号线到江苏路换二号线然后换四号线然后换十号线…\n欢迎您乘坐轨道交通四号线，本线环线本线环线本线环线本线环线哈哈哈哈哈哈哈哈哈哈哈哈……\n傻乎乎的骑共享单车跑去B站总部逛了一大圈，问了一下前台小姐姐只能参观一楼大厅后去了咖啡厅花了50块钱买一杯小电视咖啡（忘记叫什么名字了）后含泪把它喝掉…\n\n太好吃了呜呜呜呜呜…\n还真不是Bilibili会员购骗死肥宅钱…\n所以我什么都没有买。\n\n下午开始下雨，懒得拿相机，也没怎么用手机拍照，就顺着地铁线路依次去了趟同济，交大，顺路去了武康大楼，参观了宋庆龄故居。最后去了师范大，没有去复旦因为时间不够了。\n逛那些校园的时候只是打着伞进去走了一圈代表哦我已经来过这里了，一张照片都没有拍。\n去同济时正赶上开学，去看了一眼樱花树还没有开，就匆匆走了。\n只不过是多抽出一些时间让自己走在街上闲逛罢了…\n好多时间都是在地铁上度过的。\n\n想了想明天就要坐飞机回家了所以内心很是不舍晚上又坐地铁去了城隍庙（豫园），吃了豫园卖的特别难吃的小吃后（终于明白为什么上海本地人几乎不去豫园这个地方了）回旅店早早睡觉为明天早起做准备…\n因为起床晚了为了赶时间坐的磁悬浮去的普通国际姬场（雾），没有坐二号线广兰路到浦东国际机场的延线有些可惜。\n\n飞机即将降落时在城市上空绕了好几圈，体验了好几次失重的感觉（太好玩了我还要玩 #啪）\n"}]}